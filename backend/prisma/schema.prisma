// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

// Define the User model
model user {
  UserID   Int       @id @default(autoincrement())
  Username String
  Password String
  Email    String    @unique
  RoleId   Int
  StaffId  Int
  Role     role_et?  @relation("Role_User", fields: [RoleId], references: [RoleID])
  admin    admin?    @relation("Admin_User", fields: [StaffId], references: [AdminID], map: "user_admin")
  Employee employee? @relation("Employee_User", fields: [StaffId], references: [EmployeeID], map: "user_employee")
}

// Define the Employee model
model employee {
  EmployeeID          Int       @id @default(autoincrement())
  FirstName           String
  LastName            String
  Email               String    @unique
  ContactNumber       String
  EmploymentStartDate String
  Salary              salary[]   @relation("Employee_Salary")
  Advance             advance[] @relation("Employee_Advance")
  Expense             expense[] @relation("Employee_Expense")
  user                user[]    @relation("Employee_User")
}

model admin {
  AdminID          Int       @id @default(autoincrement())
  Username         String
  Email            String    @unique
  user             user[]    @relation("Admin_User")
  approvedExpenses expense[] @relation("ApprovedByAdmin")
  givenAdvances    advance[] @relation("GivenByAdmin")
}

// Define the Role model
model role_et {
  RoleID   Int    @id @default(autoincrement())
  RoleName String @unique
  users    user[] @relation("Role_User")
}

// Define the Salary model
model salary {
  SalaryID         Int      @id @default(autoincrement())
  EmployeeID       Int
  BasicSalary      Float
  Bonuses          Float
  Allowances       Float
  Deductions       Float
  PaymentFrequency SalaryFrequency
  PaymentStatus    Status
  Employee         employee @relation("Employee_Salary", fields: [EmployeeID], references: [EmployeeID])
}

// Define the Advance model
model advance {
  AdvanceID      Int      @id @default(autoincrement())
  EmployeeID     Int
  AdvanceAmount  Float
  DateIssued     String
  Reason         String
  Status         Status
  GivenByAdminID Int
  GivenByAdmin   admin?   @relation("GivenByAdmin", fields: [GivenByAdminID], references: [AdminID])
  Employee       employee @relation("Employee_Advance", fields: [EmployeeID], references: [EmployeeID])
}

// Define the Expense model
model expense {
  ExpenseID         Int              @id @default(autoincrement())
  EmployeeID        Int
  Date              String
  Amount            Float
  Category          ExpenseCategoryName
  Purpose           String
  ApprovalStatus    Status
  ApprovedByAdminID Int?
  ImagesSlip        String[]
  ApprovedByAdmin   admin?           @relation("ApprovedByAdmin", fields: [ApprovedByAdminID], references: [AdminID])
  Employee          employee         @relation("Employee_Expense", fields: [EmployeeID], references: [EmployeeID])
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum ExpenseCategoryName {
  OFFICE_SUPPLIES
  TRANSPORTATION
  MEALS_ENTERTAINMENT
  MISCELLANEOUS
  TRAVEL
  PETROL
  HOTELS
  UTILITIES
  EQUIPMENT
  TRAINING
  MARKETING
  CONSULTING
  INSURANCE
}

enum SalaryFrequency {
  WEEKLY
  MONTHLY
  YEARLY
}